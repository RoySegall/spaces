<?php

/**
 * @file
 * Main functionality file for the spaces module.
 */

/**
 * Implements hook_init().
 */
function spaces_init() {
  global $conf;
  $debug = FALSE;
  if ($debug) {
    // Create a space to a article node.
    $space = spaces_create('article');
    $space->entity_id = 1;
    $space->entity_type = 'node';
    $space->settings['variables'] = array('site_name' => 'foo');
    $space->save();
  }

  // Get the context.
  spaces_context();
}

/**
 * Implements hook_menu().
 */
function spaces_menu() {
  $items = array();

  $items['admin/config/spaces'] = array(
    'title' => 'Spaces',
    'description' => 'Spaces managing.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer spaces'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/spaces/order_context'] = array(
    'title' => 'Contexts manage order',
    'description' => 'Manage order of contexts.',
    'access arguments' => array('manage spaces context order'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_configure_form'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function spaces_permission() {
  return array(
    'administer spaces' => array(
      'title' => t('Manage spaces'),
      'description' => t('Manage spaces module functionality'),
    ),
    'manage spaces context order' => array(
      'title' => t('Manage spaces context order'),
      'description' => t('Grant permission for managing the order of the spaces context.'),
    ),
    'manage spaces fields' => array(
      'title' => t('Manage spaces fields'),
      'description' => t('Grant permission for managing the space entity fields.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function spaces_theme() {
  return array(
    'spaces_configure_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Get the current context.
 */
function spaces_context() {
  $context = &drupal_static(__FUNCTION__, FALSE);

  if (!empty($context)) {
    return $context;
  }

  $context = spaces_determine_context();

  return $context;
}

/**
 * Determine the context of the current space.
 *
 * @param $item
 *  Optional; A menu item that context should be extracted from. If empty
 *  defaults to the current menu item by using menu_get_item().
 *
 * @return
 *  The current context of the user.
 */
function spaces_determine_context($item = NULL) {
  if (!$enabled = variable_get("spaces_context_spaces")) {
    return;
  }

  $item = $item ? $item : menu_get_item();

  // Get all the methods and order them by the weight.
  $weights = variable_get("spaces_providers_weight_spaces");

  $plugins = spaces_get_spaces_styles();

  foreach ($plugins as $id => &$plugin) {
    if (empty($enabled[$id])) {
      unset($plugins[$id]);
    }
    $plugin['weight'] = $weights[$id];
  }
  uasort($plugins, 'drupal_sort_weight');

  // Get the all the determine context plugins.
  $method = NULL;
  unset($plugin);
  foreach ($plugins as $plugin) {
    if (!empty($plugin['path'])) {
      foreach ($plugin['path'] as $path) {
        if (strpos($item['path'], $path) === 0) {
          $method = $plugin;
          break 2;
        }
      }
    }
  }

  // Get the first plugin provider.
  if (!empty($method)) {
    $value = call_user_func($method['determine_function'], $item);
  }
  else {
    $plugin = reset($plugins);
    $value = call_user_func($plugin['determine_function'], $item);
  }

  return reset($value);
}

/**
 * Implements hook_ctools_plugin_api().
 */
function spaces_ctools_plugin_api($module, $api) {
  if ($module == 'spaces' && $api == 'spaces_context') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function spaces_ctools_plugin_type() {
  $plugins['spaces_context'] = array(
    'classes' => array('class'),
    'process' => 'spaces_plugin_process',
  );
  return $plugins;
}

/**
 * Add defaults values to the notifier plugins.
 *
 * - 'description': The description of the plugin.
 */
function spaces_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function spaces_ctools_plugin_directory($module, $plugin) {
  if ($module == 'spaces') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Helper function to include CTools plugins and get a notifier plugin.
 *
 * @param $plugin_name
 *   The plugin that should be loaded.
 *
 * @return array
 */
function spaces_get_spaces_style($style_name) {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_context', $style_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function spaces_get_spaces_styles() {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_context');
}

/**
 * Implements hook_entity_info().
 */
function spaces_entity_info() {
  $return = array(
    'space' => array(
      'label' => t('Space'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'Space',
      'base table' => 'space',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'space' => array(
          'label' => t('Space'),
          'admin' => array(
            'path' => 'admin/config/spaces',
            'real path' => 'admin/config/spaces',
            'access arguments' => array('manage spaces fields'),
          ),
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Create a base object of the space app entity.
 *
 * @param $type
 *  The type of the space.
 * @param $values
 *  Overriding the entity settings.
 * @return Space
 */
function spaces_create($type, $values = array()) {
  $values['type'] = $type;
  return entity_create('space', $values);
}

/**
 * Loading a single spaces instance.
 *
 * @param $id
 *  The identifier of the space instance.
 * @return Space
 *  A space object.
 */
function spaces_load($id) {
  $spaces = spaces_load_multiple(array($id));
  return reset($spaces);
}

/**
 * Loading multiple spaces instances.
 *
 * @param $ids
 *  Array of spaces ID's.
 */
function spaces_load_multiple($ids) {
  return entity_load('space', $ids);
}

/**
 * Loading spaces referenced to an entity.
 *
 * @param $entity_type
 *  The entity type.
 * @param $data
 *  The entity object or identifier.
 *
 * @return
 *  All the referenced spaces.
 */
function spaces_load_entity_spaces($entity_type, $data) {
  $wrapper = entity_metadata_wrapper($entity_type, $data);

  // Load all the spaces for the node the user watching.
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'space')
    ->propertyCondition('entity_id', $wrapper->getIdentifier())
    ->propertyCondition('entity_type', $wrapper->type())
    ->propertyCondition('type', $wrapper->getBundle())
    ->propertyCondition('status', 1)
    ->execute();

  if (empty($result['space'])) {
    return array();
  }

  return spaces_load_multiple(array_keys($result['space']));
}

/**
 * Manage the spaces context plugins.
 */
function spaces_configure_form() {

  $form = array(
    '#submit' => array('spaces_configure_form_submit'),
    '#theme' => 'spaces_configure_form',
    '#spaces_providers' => spaces_get_spaces_styles(),
  );

  _spaces_configure_form_table($form);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Helper function to build the spaces context plugin manager.
 */
function _spaces_configure_form_table(&$form) {
  $type = 'spaces';

  $table_form = array(
    '#title' => t('Spaces context detection'),
    '#tree' => TRUE,
    '#description' => t('Order of Spaces context detection methods.'),
    '#spaces_providers' => array(),
    '#show_operations' => FALSE,
    'weight' => array('#tree' => TRUE),
    'enabled' => array('#tree' => TRUE),
  );

  $spaces_providers = $form['#spaces_providers'];
  // Enable url and node context handlers by default.
  $defaults = array('og_context' => -5, 'node' => -4, 'user' => -3);
  $enabled_providers = variable_get("spaces_context_$type", $defaults);
  $providers_weight = variable_get("spaces_providers_weight_$type", $defaults);

  // Add missing data to the providers lists.
  foreach ($spaces_providers as $id => $provider) {
    if (!isset($providers_weight[$id])) {
      $providers_weight[$id] = spaces_provider_weight($provider);
    }
  }

  // Order providers list by weight.
  asort($providers_weight);

  foreach ($providers_weight as $id => $weight) {
    $enabled = !empty($enabled_providers[$id]);
    $provider = $spaces_providers[$id];

    $table_form['#spaces_providers'][$id] = $provider;

    $table_form['weight'][$id] = array(
      '#type' => 'weight',
      '#default_value' => $weight,
      '#attributes' => array('class' => array("spaces-provider-weight-$type")),
    );

    $table_form['title'][$id] = array('#markup' => check_plain($provider['title']));
    $table_form['enabled'][$id] = array('#type' => 'checkbox', '#default_value' => $enabled);
    $table_form['description'][$id] = array('#markup' => filter_xss_admin($provider['description']));

    $config_op = array();
    if (isset($provider['config'])) {
      $config_op = array('#type' => 'link', '#title' => t('Configure'), '#href' => $provider['config']);
      // If there is at least one operation enabled show the operation column.
      $table_form['#show_operations'] = TRUE;
    }
    $table_form['operation'][$id] = $config_op;
  }

  $form['spaces'] = $table_form;
}

/**
 * Returns HTML for a spaces context configuration form.
 *
 * @param $variables
 *  An associative array containing:
 *    - form: A render element representing the form.
 *
 * @return
 *  HTML output.
 */
function theme_spaces_configure_form($variables) {
  $form = $variables['form'];
  $output = '';

  $type = 'spaces';
  $rows = array();
  $title = '<label>' . $form[$type]['#title'] . '</label>';
  $description = '<div class="description">' . $form[$type]['#description'] . '</div>';

  foreach ($form[$type]['title'] as $id => $element) {
    // Do not take form control structures.
    if (is_array($element) && element_child($id)) {
      $row = array(
        'data' => array(
          '<strong>' . drupal_render($form[$type]['title'][$id]) . '</strong>',
          drupal_render($form[$type]['description'][$id]),
          drupal_render($form[$type]['enabled'][$id]),
          drupal_render($form[$type]['weight'][$id]),
        ),
        'class' => array('draggable'),
      );
      if ($form[$type]['#show_operations']) {
        $row['data'][] = drupal_render($form[$type]['operation'][$id]);
      }
      $rows[] = $row;
    }
  }

  $header = array(
    array('data' => t('Detection method')),
    array('data' => t('Description')),
    array('data' => t('Enabled')),
    array('data' => t('Weight')),
  );

  // If there is at least one operation enabled show the operation column.
  if ($form[$type]['#show_operations']) {
    $header[] = array('data' => t('Operations'));
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => "spaces-negotiation-providers-$type"),
  );
  $table  = theme('table', $variables);
  $table .= drupal_render_children($form[$type]);

  drupal_add_tabledrag("spaces-negotiation-providers-$type", 'order', 'sibling', "spaces-provider-weight-$type");

  $output .= '<div class="form-item">' . $title . $description . $table . '</div>';

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Submit handler for spaces context settings.
 */
function spaces_configure_form_submit($form, &$form_state) {
  $type = 'spaces';

  $enabled_providers = $form_state['values'][$type]['enabled'];
  $providers_weight = $form_state['values'][$type]['weight'];

  variable_set("spaces_providers_weight_$type", $providers_weight);
  variable_set("spaces_context_$type", $enabled_providers);

  $form_state['redirect'] = 'admin/config/spaces/order_context';
  drupal_set_message(t('Spaces contexts settings has been saved.'));
}

/**
 * Return the passed spaces context provider weight or a default value.
 *
 * @param $provider
 *   A group context provider data structure.
 *
 * @return
 *   A numeric weight.
 */
function spaces_provider_weight($provider) {
  $default = is_numeric($provider) ? $provider : 0;
  return isset($provider['weight']) && is_numeric($provider['weight']) ? $provider['weight'] : $default;
}
