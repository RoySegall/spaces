<?php

/**
 * @file
 * Main functionality file for the Spaces module.
 */

/**
 * Define an enabled Space status.
 */
define('SPACES_SPACE_ENABLED', TRUE);

/**
 * Define a disabled Space status.
 */
define('SPACES_SPACE_DISABLED', FALSE);

/**
 * Get spaces referencing entities.
 *
 * @param $entity_type
 *  The entity type.
 * @param $ids
 *   Array of entity IDs.
 * @param $space_bundle
 *  Optional; The Space bundle to filter by. Defaults to all bundles.
 * @param $status
 *  Optional; The Space status. Defaults to enabled Spaces.
 *
 * @return
 *  Array of Space objects, or an empty array.
 */
function spaces_load_spaces_by_entity($entity_type, $ids = array(), $space_bundle = FALSE, $status = array(SPACES_SPACE_ENABLED), $create_new = FALSE) {
  // Load all the spaces for the node the user watching.
  $query = new entityFieldQuery();
  $query
    ->entityCondition('entity_type', 'space')
    ->propertyCondition('entity_type', $entity_type)
    ->propertyCondition('entity_id', $ids, 'IN')
    ->propertyCondition('status', $status, 'IN')
    ->execute();

  if ($space_bundle) {
    $query->entityCondition('bundle', $space_bundle);
  }

  $result = $query->execute();

  if (empty($result['space']) && $create_new && $space_bundle && count($ids) == 1) {
    // Return a new Space object.
    $id = reset($ids);
    return spaces_create($space_bundle, $entity_type, $id);
  }

  return !empty($result['space']) ? spaces_load_multiple(array_keys($result['space'])) : array();
}

/**
 * Invoke Space overrides by a Space override plugin.
 *
 * @param $plugin_name
 *   The Space override plugin name (e.g. variables, context).
 * @param $data
 *   Optional; variable passed by reference to alter by the Space overriders.
 */
function spaces_invoke_overrides($plugin_name, &$data = NULL) {
  if (!$spaces_context = spaces_context()) {
    return;
  }

  $spaces = array();
  foreach ($spaces_context as $entity_type => $ids) {
    $spaces = array_merge($spaces, spaces_load_spaces_by_entity($entity_type, $ids));
  }

  if (!$spaces) {
    return;
  }

  foreach ($spaces as $space) {
    $space->getOverride($plugin_name)->override($data);
  }
}

/**
 * Implements hook_init().
 *
 * Allow spaces to override $conf.
 */
function spaces_init() {
  spaces_invoke_overrides('variable');
}

/**
 * Implements hook_context_load_alter().
 */
function spaces_context_load_alter(&$context) {
  spaces_invoke_overrides('context', $context);
}

/**
 * Get the current context.
 */
function spaces_context() {
  $spaces_context = &drupal_static(__FUNCTION__, FALSE);

  if (!empty($spaces_context)) {
    return $spaces_context;
  }

  $spaces_context = spaces_determine_context();

  return $spaces_context;
}

/**
 * Determine the context of the current page.
 *
 * @return
 *  The current context of the user.
 */
function spaces_determine_context() {
  $defaults = array('node' => -4, 'user' => -3);
  if (!$enabled = variable_get("spaces_context_spaces", $defaults)) {
    return;
  }

  // Get all the methods and order them by the weight.
  $weights = variable_get("spaces_providers_weight_spaces");

  $plugins = spaces_get_spaces_contexts();

  foreach ($plugins as $id => &$plugin) {
    if (empty($enabled[$id])) {
      unset($plugins[$id]);
    }
    $plugin['weight'] = $weights[$id];
  }
  uasort($plugins, 'drupal_sort_weight');

  $spaces_context = array();

  // Get the all the determine context plugins.
  foreach ($plugins as $plugin) {
    if (!$value = call_user_func($plugin['determine_function'])) {
      continue;
    }

    // @todo: Use plugin to get the function.
    $spaces_context = array_merge_recursive($spaces_context, $value);
  }

  return $spaces_context;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function spaces_ctools_plugin_api($module, $api) {
  if ($module == 'spaces' && $api == 'spaces_context') {
    return array('version' => 1);
  }
  elseif ($module == 'spaces' && $api == 'spaces_override') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function spaces_ctools_plugin_type() {
  $plugins['spaces_context'] = array(
    'classes' => array('class'),
    'process' => 'spaces_context_plugin_process',
  );

  $plugins['spaces_override'] = array(
    'classes' => array('class'),
    'process' => 'spaces_override_plugin_process',
  );
  return $plugins;
}

/**
 * Add defaults values to the Space context plugins.
 */
function spaces_context_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'options' => array(),
  );
}

/**
 * Add defaults values to the Space overrides plugins.
 */
function spaces_override_plugin_process(&$plugin, $info) {
  $plugin['options'] += array(
    'settings_key' => $plugin['name'],
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function spaces_ctools_plugin_directory($module, $plugin) {
  if ($module == 'spaces') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Helper function to include CTools plugins and get a notifier plugin.
 *
 * @param $plugin_name
 *   The plugin that should be loaded.
 *
 * @return array
 */
function spaces_get_spaces_context($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_context', $plugin_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function spaces_get_spaces_contexts() {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_context');
}

/**
 * Helper function to include CTools plugins and get a notifier plugin.
 *
 * @param $plugin_name
 *   The plugin that should be loaded.
 *
 * @return array
 */
function spaces_get_spaces_override($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_override', $plugin_name);
}

/**
 * Helper function to include CTools plugins and get all notifier plugins.
 */
function spaces_get_spaces_overrides() {
  ctools_include('plugins');
  return ctools_get_plugins('spaces', 'spaces_override');
}

/**
 * Implements hook_entity_info().
 */
function spaces_entity_info() {
  $return = array(
    'space' => array(
      'label' => t('Space'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'Space',
      'base table' => 'space',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );

  return $return;
}

/**
 * Create a base object of the space app entity.
 *
 * @param $type
 *  The type of the space.
 * @param $values
 *  Overriding the entity settings.
 * @return Space
 */
function spaces_create($type, $entity_type, $entity_id, $values = array()) {
  $values['type'] = $type;
  $values['entity_type'] = $entity_type;
  $values['entity_id'] = $entity_id;

  $values += array(
    'status' => TRUE,
  );

  return entity_create('space', $values);
}

/**
 * Loading a single spaces instance.
 *
 * @param $id
 *  The identifier of the space instance.
 * @return Space
 *  A space object.
 */
function spaces_load($id) {
  $spaces = spaces_load_multiple(array($id));
  return reset($spaces);
}

/**
 * Loading multiple spaces instances.
 *
 * @param $ids
 *  Array of spaces ID's.
 */
function spaces_load_multiple($ids) {
  return entity_load('space', $ids);
}
