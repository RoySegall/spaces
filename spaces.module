<?php

/**
 * @file
 * Main functionality file for the spaces module.
 */

/**
 * Implements hook_init().
 */
function spaces_init() {
  global $conf;
  $debug = FALSE;
  if ($debug) {
    // Create a space to a article node.
    $space = spaces_create('article');
    $space->entity_id = 1;
    $space->entity_type = 'node';
    $space->settings['variables'] = array('site_name' => 'foo');
    $space->save();
  }

  $menu = menu_get_item();
  if (!empty($menu['load_functions']) && $menu['load_functions'][1] == 'node_load') {
    $spaces = spaces_load_entity_spaces('node', $menu['original_map'][1]);

    foreach ($spaces as $space) {
      // Overriding the $conf values with the space values.
      $conf = drupal_array_merge_deep($conf, $space->settings['variables']);
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function spaces_entity_info() {
  $return = array(
    'space' => array(
      'label' => t('Space'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'Space',
      'base table' => 'space',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
    ),
  );

  return $return;
}

/**
 * Create a base object of the space app entity.
 *
 * @param $type
 *  The type of the space.
 * @param $values
 *  Overriding the entity settings.
 * @return Space
 */
function spaces_create($type, $values = array()) {
  $values['type'] = $type;
  return entity_create('space', $values);
}

/**
 * Loading a single spaces instance.
 *
 * @param $id
 *  The identifier of the space instance.
 * @return Space
 *  A space object.
 */
function spaces_load($id) {
  $spaces = spaces_load_multiple(array($id));
  return reset($spaces);
}

/**
 * Loading multiple spaces instances.
 *
 * @param $ids
 *  Array of spaces ID's.
 */
function spaces_load_multiple($ids) {
  return entity_load('space', $ids);
}

/**
 * Loading spaces referenced to an entity.
 *
 * @param $entity_type
 *  The entity type.
 * @param $data
 *  The entity object or identifier.
 *
 * @return
 *  All the referenced spaces.
 */
function spaces_load_entity_spaces($entity_type, $data) {
  $wrapper = entity_metadata_wrapper($entity_type, $data);

  // Load all the spaces for the node the user watching.
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'space')
    ->propertyCondition('entity_id', $wrapper->getIdentifier())
    ->propertyCondition('entity_type', $wrapper->type())
    ->propertyCondition('type', $wrapper->getBundle())
    ->propertyCondition('status', 1)
    ->execute();

  if (empty($result['space'])) {
    return array();
  }

  return spaces_load_multiple(array_keys($result['space']));
}
