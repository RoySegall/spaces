<?php

/**
 * @file
 * Main module file for the Spaces UI module.
 */

/**
 * Implements hook_menu().
 */
function spaces_ui_menu() {
  $items = array();

  $items['admin/config/spaces'] = array(
    'title' => 'Spaces',
    'description' => 'Spaces managing.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer spaces'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/spaces/order_context'] = array(
    'title' => 'Contexts manage order',
    'description' => 'Manage order of contexts.',
    'access arguments' => array('manage spaces context order'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_ui_configure_form'),
  );

  $items['node/%node/spaces'] = array(
    'title' => 'Spaces',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spaces_ui_apps_manage', 1),
    'access arguments' => array('administer spaces'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function spaces_ui_entity_info_alter(&$info) {
  $info['space']['bundles'] = array(
    'space' => array(
      'label' => t('Space'),
      'admin' => array(
        'path' => 'admin/config/spaces',
        'real path' => 'admin/config/spaces',
        'access arguments' => array('manage spaces fields'),
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function spaces_ui_permission() {
  return array(
    'administer spaces' => array(
      'title' => t('Manage spaces'),
      'description' => t('Manage spaces module functionality'),
    ),
    'manage spaces context order' => array(
      'title' => t('Manage spaces context order'),
      'description' => t('Grant permission for managing the order of the spaces context.'),
    ),
    'manage spaces fields' => array(
      'title' => t('Manage spaces fields'),
      'description' => t('Grant permission for managing the space entity fields.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function spaces_ui_theme() {
  return array(
    'spaces_ui_configure_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Manage the spaces context plugins.
 */
function spaces_ui_configure_form() {

  $form = array(
    '#submit' => array('spaces_ui_configure_form_submit'),
    '#theme' => 'spaces_ui_configure_form',
    '#spaces_providers' => spaces_get_spaces_contexts(),
  );

  _spaces_ui_configure_form_table($form);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Helper function to build the spaces context plugin manager.
 */
function _spaces_ui_configure_form_table(&$form) {
  $type = 'spaces';

  $table_form = array(
    '#title' => t('Spaces context detection'),
    '#tree' => TRUE,
    '#description' => t('Order of Spaces context detection methods.'),
    '#spaces_providers' => array(),
    '#show_operations' => FALSE,
    'weight' => array('#tree' => TRUE),
    'enabled' => array('#tree' => TRUE),
  );

  $spaces_providers = $form['#spaces_providers'];
  // Enable url and node context handlers by default.
  $defaults = array('node' => -4, 'user' => -3);
  $enabled_providers = variable_get("spaces_context_$type", $defaults);
  $providers_weight = variable_get("spaces_providers_weight_$type", $defaults);

  // Add missing data to the providers lists.
  foreach ($spaces_providers as $id => $provider) {
    if (!isset($providers_weight[$id])) {
      $providers_weight[$id] = spaces_ui_provider_weight($provider);
    }
  }

  // Order providers list by weight.
  asort($providers_weight);

  foreach ($providers_weight as $id => $weight) {
    $enabled = !empty($enabled_providers[$id]);
    $provider = $spaces_providers[$id];

    $table_form['#spaces_providers'][$id] = $provider;

    $table_form['weight'][$id] = array(
      '#type' => 'weight',
      '#default_value' => $weight,
      '#attributes' => array('class' => array("spaces-provider-weight-$type")),
    );

    $table_form['title'][$id] = array('#markup' => check_plain($provider['title']));
    $table_form['enabled'][$id] = array('#type' => 'checkbox', '#default_value' => $enabled);
    $table_form['description'][$id] = array('#markup' => filter_xss_admin($provider['description']));

    $config_op = array();
    if (isset($provider['config'])) {
      $config_op = array('#type' => 'link', '#title' => t('Configure'), '#href' => $provider['config']);
      // If there is at least one operation enabled show the operation column.
      $table_form['#show_operations'] = TRUE;
    }
    $table_form['operation'][$id] = $config_op;
  }

  $form['spaces'] = $table_form;
}

/**
 * Returns HTML for a spaces context configuration form.
 *
 * @param $variables
 *  An associative array containing:
 *    - form: A render element representing the form.
 *
 * @return
 *  HTML output.
 */
function theme_spaces_ui_configure_form($variables) {
  $form = $variables['form'];
  $output = '';

  $type = 'spaces';
  $rows = array();
  $title = '<label>' . $form[$type]['#title'] . '</label>';
  $description = '<div class="description">' . $form[$type]['#description'] . '</div>';

  foreach ($form[$type]['title'] as $id => $element) {
    // Do not take form control structures.
    if (is_array($element) && element_child($id)) {
      $row = array(
        'data' => array(
          '<strong>' . drupal_render($form[$type]['title'][$id]) . '</strong>',
          drupal_render($form[$type]['description'][$id]),
          drupal_render($form[$type]['enabled'][$id]),
          drupal_render($form[$type]['weight'][$id]),
        ),
        'class' => array('draggable'),
      );
      if ($form[$type]['#show_operations']) {
        $row['data'][] = drupal_render($form[$type]['operation'][$id]);
      }
      $rows[] = $row;
    }
  }

  $header = array(
    array('data' => t('Detection method')),
    array('data' => t('Description')),
    array('data' => t('Enabled')),
    array('data' => t('Weight')),
  );

  // If there is at least one operation enabled show the operation column.
  if ($form[$type]['#show_operations']) {
    $header[] = array('data' => t('Operations'));
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => "spaces-negotiation-providers-$type"),
  );
  $table  = theme('table', $variables);
  $table .= drupal_render_children($form[$type]);

  drupal_add_tabledrag("spaces-negotiation-providers-$type", 'order', 'sibling', "spaces-provider-weight-$type");

  $output .= '<div class="form-item">' . $title . $description . $table . '</div>';

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Submit handler for spaces context settings.
 */
function spaces_ui_configure_form_submit($form, &$form_state) {
  $type = 'spaces';

  $enabled_providers = $form_state['values'][$type]['enabled'];
  $providers_weight = $form_state['values'][$type]['weight'];

  variable_set("spaces_providers_weight_$type", $providers_weight);
  variable_set("spaces_context_$type", $enabled_providers);

  $form_state['redirect'] = 'admin/config/spaces/order_context';
  drupal_set_message(t('Spaces contexts settings has been saved.'));
}

/**
 * Return the passed spaces context provider weight or a default value.
 *
 * @param $provider
 *   A group context provider data structure.
 *
 * @return
 *   A numeric weight.
 */
function spaces_ui_provider_weight($provider) {
  $default = is_numeric($provider) ? $provider : 0;
  return isset($provider['weight']) && is_numeric($provider['weight']) ? $provider['weight'] : $default;
}

/**
 * Creating a basic UI for enabling disabling the spaces.
 */
function spaces_ui_apps_manage($form, &$form_state, $node) {
  // Get all the bundles.
  $form_state['#node'] = $node;
  $entities = entity_get_info();
  $form['spaces'] = array(
    '#tree' => TRUE,
  );
  foreach ($entities as $entity_type => $entity) {
    if (!in_array($entity_type, array('user', 'node'))) {
      continue;
    }

    foreach ($entity['bundles'] as $bundle => $info) {
      $params = array(
        '@entity-type' => $entity['label'],
        '@bundle' => $info['label'],
      );

      $element_name = "spaces[$entity_type:$bundle][status]";

      $states = array(
        '#states' => array(
          'visible' => array(
            ':input[name="' . $element_name . '"]' => array('checked' => TRUE),
          ),
        ),
      );

      $form['spaces']["$entity_type:$bundle"] = array(
        '#type' => 'fieldset',
        '#title' => t("@entity-type - @bundle", $params),
      );

      $form['spaces']["$entity_type:$bundle"]['status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enabled'),
      );

      $form['spaces']["$entity_type:$bundle"]['parent'] = array(
        '#type' => 'textfield',
        '#title' => t('Parent space'),
      ) + $states;

      $form['spaces']["$entity_type:$bundle"]['visibility'] = array(
        '#type' => 'select',
        '#title' => t('Visibility'),
        '#options' => array(
          1 => t('Public'),
          2 => t('Private'),
        ),
      ) + $states;
    }
  }

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save'),
    ),
    'cancel' => array(
      '#markup' => l(t('Cancel'), url('node/' . $node->nid)),
    ),
  );

  return $form;
}

/**
 * Creating the spaces apps.
 */
function spaces_ui_apps_manage_submit($form, $form_state) {
  $spaces = $form_state['values']['spaces'];

  foreach ($spaces as $entity_bundle => $space) {
    list($entity, $bundle) = explode(":", $entity_bundle);
  }

  // @TODO: Create/update space.
  drupal_set_message(t('The spaces settings for @title were saved successfully', array('@title' => $form_state['#node']->title)));
}
